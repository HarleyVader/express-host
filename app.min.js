async function addTodb(e=views,r=[]){try{const s=fs.readdirSync(e).filter(r=>filter(r,e));for(let t of s){const s=path.join(e,t);if(fs.statSync(s).isDirectory()){await addTodb(s,r);let e=s.replace(/^views\//,"");e=e.startsWith("/")?e:"/"+e;try{const s=await db.get(e);null==s&&(await db.put(e,0),r.push(e))}catch(s){if(!s.notFound)throw s;await db.put(e,0),r.push(e)}}}}catch(e){console.error("Error in addTodb:",e)}return r}async function getDirFromdb(){let e=[];for await(const[r,s]of db.iterator({})){const[t,a]=r.split("/").filter(Boolean);let o=e.find(e=>e.folderName===t);o||(o={folderName:t,subfolders:[]},e.push(o)),a&&o.subfolders.push({subfolderName:a,link:`/${t}/${a}`,views:s})}return e}async function addValueTodb(e,r=1){let s;try{s=await db.get(e)}catch(r){throw r.notFound?new Error(`Key ${e} not found in database`):r}return s+=r,await db.put(e,s),s}function asyncHandler(e){return function(r,s,t){return Promise.resolve(e(r,s,t)).catch(t)}}const express=require("express"),fs=require("fs"),path=require("path"),{Level:Level}=require("level"),bodyParser=require("body-parser"),PORT=7777,views="./views",db=new Level("vidViews",{valueEncoding:"json"}),excludedir=["assets","src","node_modules","vidViews"],filter=(e,r=views)=>{const s=path.resolve(r)+"/"+e;return!(excludedir.includes(e)||!fs.existsSync(s))&&!!fs.statSync(s).isDirectory()},app=express();app.set("view engine","ejs"),app.set("views",path.join(__dirname,"views")),app.use(bodyParser.json()),app.get("/sync",async(e,r)=>{await addTodb(),r.redirect("/list")}),app.get("/list",async(e,r)=>{const s=await getDirFromdb();s.forEach(e=>{e.subfolders&&(e.subfolders=e.subfolders.map(r=>({...r,link:`/${e.folderName}/${r.subfolderName}`})))}),r.render("list",{folders:s})}),app.get("/:folderName/:subfolderName?",async(e,r)=>{const{folderName:s,subfolderName:t}=e.params;let a=`/${s}`;if(t&&(a+=`/${t}`),"/favicon.ico"===a)return r.status(204).end();const o=await getDirFromdb();let n;o.forEach(e=>{if(e.folderName===s)if(t){const r=e.subfolders.find(e=>e.link===a);r&&(n=r)}else n=e}),n&&r.render("index",{folderName:n.folderName,value:n.value})}),app.post("/incrementViewCount",asyncHandler(async(e,r)=>{const{key:s}=e.body,t=await addValueTodb(s);console.log(s,t),r.render("index",{folderName:s,value:t})})),app.use((e,r,s,t)=>{console.error(e.stack),s.status(500).send("Something broke!")}),app.listen(PORT,()=>{console.log(`Server started on port ${PORT}`)});